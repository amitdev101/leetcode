Questions list:
    1. Django Filters Examples 
    2. What is Q object?
    3. what is abstract model in django?
    4. redis and redis-cluster
    5. routers.py and Proxysql working.
    6. mongodb atlas working
    7. In a distributed environment how you can achieve locks with redis?
    8. which is better zookeeper or redis locks in distributed environment?
    9. what is related_to?



1. Django Filters Examples ?
    Yes, there are other ways to use the Django filter based on your use case. Here are a few more examples:
    Filter using exact match:
    If you want to filter books by an exact value, you can use the exact lookup. For example, to filter books with the title "The Great Gatsby", you can use the following code:
    python
    books = Book.objects.filter(title__exact='The Great Gatsby')
        Filter using case-insensitive match:
    If you want to perform a case-insensitive search, you can use the iexact lookup. For example, to filter books with the author name "john doe" (case-insensitive), you can use the following code:
    python
    books = Book.objects.filter(author__iexact='john doe')
        Filter using date range:
    If you want to filter books published within a specific date range, you can use the range lookup. For example, to filter books published between January 1, 2022, and December 31, 2022, you can use the following code:
    python
    start_date = date(2022, 1, 1)
    end_date = date(2022, 12, 31)
    books = Book.objects.filter(published_date__range=[start_date, end_date])
    These are just a few examples of how you can use the Django filter to query the database based on different criteria. You can use various lookups and operators provided by Django to filter data based on your specific use case.


2. What is Q object.
    We use the Q object in Django filter to build complex query expressions with multiple conditions that are combined using logical operators like AND, OR, and NOT.
    Using Q object provides us with more flexibility in constructing complex queries as it allows us to group multiple conditions together using parentheses and apply logical operators on them.
    Here are some benefits of using Q objects in Django filter:
        Complex queries: Q objects can be used to construct complex queries that are not possible using the regular filter method.
        Reusability: Q objects can be reused across multiple queries, making the code more modular and easier to maintain.
        Dynamic queries: Q objects allow us to construct queries dynamically by adding or removing conditions based on user input or other conditions.
        Negation: Q objects can also be used to negate a condition using the ~Q operator, which is not possible using the regular filter method.
    For example, suppose you want to filter books that were published in the year 2022 and have an author named "John Doe" OR have a title that contains the word "Python". You can use the Q object to construct this complex query as follows:
    python
    from django.db.models import Q
    from datetime import date

    books = Book.objects.filter(
        Q(published_date__year=2022) & 
        (Q(author__icontains='John Doe') | Q(title__icontains='Python'))
    )
    In the above code, we have combined multiple conditions using Q objects and used logical operators like & and | to group them together. This query would be difficult to construct using the regular filter method.


3. what is abstract model in django?
    In Django, an abstract model is a model that is not meant to be instantiated or saved to the database, but rather serves as a base class for other models to inherit from. Abstract models are defined using the abstract = True option in the model's Meta class.
    When a model is defined as abstract, Django will not create a database table for it. Instead, it will use the fields and methods defined in the abstract model as a basis for creating the tables of any model that inherits from it.
    Here's an example of an abstract model in Django:
        from django.db import models
        class BaseModel(models.Model):
            created = models.DateTimeField(auto_now_add=True)
            updated = models.DateTimeField(auto_now=True)

            class Meta:
                abstract = True

        class MyModel(BaseModel):
            name = models.CharField(max_length=50)
            
